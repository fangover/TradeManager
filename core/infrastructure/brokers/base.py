from abc import ABC, abstractmethod
from typing import Any, Dict, List, Optional


class BaseBroker(ABC):
    @abstractmethod
    def connect(self) -> bool: ...
    @abstractmethod
    def get_tick(self): ...
    @abstractmethod
    def get_candles(
        self, timeframe: str, count: int
    ) -> Optional[List[Dict[str, Any]]]: ...
    @abstractmethod
    def get_historical_candles(
        self, timeframe, start_time, end_time
    ) -> Optional[List[Dict[str, Any]]]: ...
    @abstractmethod
    def add_order(self, direction, volume, sl, tp, comment): ...
    @abstractmethod
    def modify_position(self, position, new_sl, new_tp): ...
    @abstractmethod
    def send_order(self, request: dict): ...
    @abstractmethod
    def close_position(self, position): ...
    @abstractmethod
    def get_pip_value(self) -> float: ...
    @abstractmethod
    def get_account_info(self) -> tuple[float, float]: ...
    @abstractmethod
    def get_positions(self, symbol=None, magic=None) -> Optional[List[Any]]: ...
